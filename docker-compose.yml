version: '3.8'

services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
      - blockchain
      - adminer
      - rabbitmq
    volumes:
      - ./.nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  frontend:
    build:
      context: ./Front-end
      dockerfile: Dockerfile
    depends_on:
      - backend
  
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      blockchain:
        condition: service_healthy

  blockchain:
    build:
      context: ./Blockchain
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - ./Blockchain/health_check.sh:/usr/local/bin/bc_health_check.sh
    healthcheck:
      test: ["CMD-SHELL", "sh /usr/local/bin/bc_health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: maindb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  adminer:
    image: adminer
    restart: always
    expose:
      - "8080"
    depends_on:
      db:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3.12.14-management-alpine
    environment:
        - RABBITMQ_DEFAULT_USER=guest
        - RABBITMQ_DEFAULT_PASS=guest
    restart: unless-stopped
    expose:
      - "5672"
      - "15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  db_volume:
         
    
     